// This file automatically generated by MOKO KSwift (https://github.com/icerockdev/moko-kswift)
//
import MultiPlatformLibrary

/**
 * selector: ClassContext/AliasiKa:shared/surik/simyan/aliasika/presentation/AbstractGameViewModel.Action */
public enum AbstractGameViewModelActionKs {

  case fiveWordsGuessed
  case roundFinished

  public var sealed: AbstractGameViewModelAction {
    switch self {
    case .fiveWordsGuessed:
      return MultiPlatformLibrary.AbstractGameViewModelActionFiveWordsGuessed() as MultiPlatformLibrary.AbstractGameViewModelAction
    case .roundFinished:
      return MultiPlatformLibrary.AbstractGameViewModelActionRoundFinished() as MultiPlatformLibrary.AbstractGameViewModelAction
    }
  }

  public init(_ obj: AbstractGameViewModelAction) {
    if obj is MultiPlatformLibrary.AbstractGameViewModelActionFiveWordsGuessed {
      self = .fiveWordsGuessed
    } else if obj is MultiPlatformLibrary.AbstractGameViewModelActionRoundFinished {
      self = .roundFinished
    } else {
      fatalError("AbstractGameViewModelActionKs not synchronized with AbstractGameViewModelAction class")
    }
  }

}

/**
 * selector: ClassContext/AliasiKa:shared/surik/simyan/aliasika/presentation/MainViewModel.Action */
public enum MainViewModelActionKs {

  case gameFinished

  public var sealed: MainViewModelAction {
    switch self {
    case .gameFinished:
      return MultiPlatformLibrary.MainViewModelActionGameFinished() as MultiPlatformLibrary.MainViewModelAction
    }
  }

  public init(_ obj: MainViewModelAction) {
    if obj is MultiPlatformLibrary.MainViewModelActionGameFinished {
      self = .gameFinished
    } else {
      fatalError("MainViewModelActionKs not synchronized with MainViewModelAction class")
    }
  }

}
